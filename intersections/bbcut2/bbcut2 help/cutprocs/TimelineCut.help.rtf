{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red191\green0\blue0;
\red0\green0\blue191;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
TimelineCut
\f2\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f2\b0 \
\
A cut procedure inspired by (particularly African or South American clave) use of timelines, or additive meters. The functionality is somewhat confounded herein, but I don't think there is any point just reproducing the existing modes precisely- much better to bounce off in new directions. \
\
Justin London notes (J. London. (2004) Hearing in Time (psychological aspects of musical meter), OUP: New York, himself referencing some wider literature on this) the existence of other psychological meters based on certain partitions (the beat-cycle) of an n-cycle. Where the subdivisions are not arranged exactly evenly (but are typically maximally even with respect to n or within some tolerance of this) he calls these Non Isochronous Meters. \
\
So let's explore taking them as guides to our cutting. I don't follow the whole psychological ramifications of the hierarchical sturctures and the suggested durations (ie keeping 100mS as the shortest possible usable subdivision) but just make an open system for experimentation.  \
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\
*
\f1\b new(phraselength, timelinefunc, blockfunc, freeze)
\f2\b0    \
Create a CageCut object with the given parameters.\
\

\f1\b phraselength
\f2\b0  - Choose a new phraselength. You can pass a function, which will be called at \
each new phrase. \

\f1\b timelinefunc 
\f2\b0 - Anything that returns an array of subdivisions when .value is called on it. (This array is normalizeSummed so it always adds up to 1.0). These subdivisions will be applied to the phraselength.\

\f1\b blockfunc 
\f2\b0 - A function which takes a blocksize and turns it into an array of cuts\

\f1\b freeze 
\f2\b0 - A flag to freeze the current timeline if true. Else, keep calling timeline func once per phrase. \
\
\
Examples-\
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf4 //you must have run this line before any of the examples below\cf3 \
f= \cf5 BBCutBuffer\cf3 (\cf6 "sounds/break"\cf3 ,8); \
\
\cf5 TempoClock\cf3 .default.tempo_(2.3);
\f2\fs24 \
\

\f0\fs18 \cf4 //defaults to 3+3+2\cf3 \
a=\cf5 BBCut2\cf3 (\cf5 CutBuf2\cf3 (f,1.0, dutycycle:0.5),\cf5 TimelineCut\cf3 .new).play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 a.end;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf4 //provide timeline creation function, with blockfunc which subdivides it into repeated eighths\cf3 \
\cf4 //done to make the core timelines obvious\cf3 \
(\
a=\cf5 BBCut2\cf3 ([\cf5 CutBuf2\cf3 (f,1.0, dutycycle:0.2),\cf5 CutComb1\cf3 .new],\cf5 TimelineCut\cf3 (8.0,\{[[3,3,3,3,2,2],[3,2,3,2,3,3],[5,5,3,3]].wchoose([0.5,0.4,0.1])\},\
\{\cf5 arg\cf3  dur; \cf5 Array\cf3 .fill((dur*2).round(1),\{0.5\})\})).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 a.end;\
\
\
\cf4 //weirder and more interesting generative patterns\cf3 \
(\
a=\cf5 BBCut2\cf3 ([\cf5 CutBuf2\cf3 (f,1.0, dutycycle:0.2),\cf5 CutComb1\cf3 .new],\cf5 TimelineCut\cf3 (8.0,\{\cf5 Array\cf3 .fill(rrand(3,7),\{rrand(1,3)\})\},\
\{\cf5 arg\cf3  dur; dur*[0.5,0.25,0.25]\})).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 a.end;\
\
\
\cf4 //75% chance of freezing on the current pattern\cf3 \
(\
a=\cf5 BBCut2\cf3 ([\cf5 CutBuf2\cf3 (f,0.3, pbsfunc:\{[1,1.5].wchoose([0.9,0.1])\}),\cf5 CutBRF1\cf3 (3000,0.2,1.5)],\cf5 TimelineCut\cf3 (4.0,\{\cf5 Array\cf3 .series(rrand(3,19),1,rrand(1,3)).reverse\},\
\{\cf5 arg\cf3  dur; \cf5 var\cf3  num= (rrand(1,7)*rrand(1,7)).div(7).max(1); \cf5 Array\cf3 .fill(num,dur/num)\},\{0.75.coin\})).play;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 a.end;\cf0 \
}