{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
ChooseBlockProc
\f2\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f2\b0 \
\
This cut procedure allows the user to specify the block size, and how many subdivisions to\
cut it into. WarpCutProc1 used this paradigm, and this class is a simplification of that class.\
The class was introduce in the BBCut Library paper, which used it to explain adding a new\
cut procedure to the library. \
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\
*
\f1\b new(blocksizefunc, numcutfunc, phraselength, bpsd)
\f2\b0    \
Create a ChooseBlockProc object with the given parameters.\
\

\f1\b blocksizefunc
\f2\b0  - A function (or something else responding to value) returning the next block length.  \
The function will be passed the beats left within the current phrase, and the current phrase length to\
assist judgement. The main code will automatically reduce block lengths where necessary to fit\
the next block into a phrase.\

\f1\b numcutfunc 
\f2\b0 - an object responding to the value message with the number of desired subdivisions of \
the new block. Each cut is of even length. The blocklength is passed in.\

\f1\b phraselength 
\f2\b0 - Next length of phrase in beats.\

\f1\b bpsd
\f2\b0  - beats per sub division. Sets a primitive cut size resolution for choose offset messages. \
\

\f1\b \ul Instance Methods
\f2\b0 \ulnone \
\

\f1\b initChooseBlockProc 
\f2\b0 Called internally after a new.\
\
Examples- Substitute your own break sample to hear this properly\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 (	\cf2 //defaults\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
\
Routine.run(\{\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/a11wlk01.wav"\cf0 ,4);\
\
s.sync;\
\
\cf3 BBCut2\cf0 (\cf3 CutBuf2\cf0 (sf),\cf3 ChooseBlockProc\cf0 .new).play(2.4);\
\});\
\
)
\fs24 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\cf5 	\cf6 //tightening over a phrase- showing arguments passd by procedure to user provided functions\cf5 \
\cf7 var\cf5  sf, blocksize, tightenchance,prop,fx, tempo, delay;\
\cf7 var\cf5  fxgroup;\
\
fxgroup=\cf7 Group\cf5 .tail(\cf7 Node\cf5 .basicNew(s,1));\
\
\cf7 Routine\cf5 .run(\{\
sf= \cf7 BBCutBuffer\cf5 (\cf8 "sounds/break2"\cf5 ,4);\
\
s.sync;\
\
tempo= 2.4;\
delay= 1/(2.4*2);\
\
prop=1.0;\
\
fx= \{\cf7 arg\cf5  prp=1.0; \cf7 var\cf5  in;  in= 0.5*\cf7 In\cf5 .ar(0,2); \
\
\cf7 ReplaceOut\cf5 .ar(0,\cf7 Limiter\cf5 .ar(in+(prp*\cf7 CombN\cf5 .ar(in, delay, delay,delay*2))))\
\
\}.play(fxgroup);\
\
\cf6 //default is add to tail of rootNode, so need to force it to appear before the fx unit\cf5 \
\cf6 //Group.head makes a new Group at the head of the RootNode (Nil.asGroup= RootNode.new)\cf5 \
\cf7 BBCut2\cf5 (\cf7 CutGroup\cf5 (\cf7 CutBuf2\cf5 (sf, dutycycle: \{1.1-prop\}), \cf7 Group\cf5 .before(fxgroup)),\cf7 ChooseBlockProc\cf5 (\{\
\cf7 arg\cf5  beatsleft, currphraselength; \
\
prop= 1.0-(beatsleft/currphraselength);\
\
fx.set(\cf9 \\prp\cf5 ,prop);\
\
if((tightenchance.coin) && (prop.coin) && (blocksize>0.015625), \{blocksize= blocksize*0.5\});\
\
blocksize;\
\},\{\cf7 arg\cf5  blocklength; \
if((blocklength>0.25) && (0.3.coin),\{[2,3,5].choose\},\{1\})\
\}, \{prop=1.0; blocksize=2.0; tightenchance= 1.0.rand; 8.0;\})).play(tempo);\
\
\});\
\
\cf0 )\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //using ChooseBlockProc to roll through a sound with UI control\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w;\
\cf3 var\cf0  slider, num, data;\
\cf3 var\cf0  sf;\
\
data=	\cf2 //control spec data for ui controls\cf0 \
[\
[\cf4 "blocksubdiv"\cf0 ,1,8,\cf10 \\lin\cf0 ,1,1],				\cf2 //blocksubdiv\cf0 \
[\cf4 "dutycycle"\cf0 , 0.2, 2.0,\cf10 \\lin\cf0 ,0.0,1.0]			\cf2 //dutycycle\cf0 \
];\
\
w = \cf3 SCWindow\cf0 (\cf4 "BBCutProc11 demo N.M.Collins 23/08/03"\cf0 , \cf3 Rect\cf0 .new(100, 500, 500, (30*(data.size))));\
\
slider= \cf3 Array\cf0 .fill(data.size, \{\cf3 arg\cf0  i; \cf3 DDSlider\cf0 .performList(\cf10 \\new\cf0 ,[w, \cf3 Rect\cf0 (5,30*i, 300, 30)]++ data.at(i))\}); \
\
w.front;\
\
\cf3 Routine\cf0 .run(\{\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8);\
\
s.sync;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //dutycycle forces some overlap of grains\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut2\cf0 (\cf3 CutBuf2\cf0 (sf,0, dutycycle: slider.at(1)),\
\cf3 ChooseBlockProc\cf0 .new(1.0, \{slider.at(0).value.round(1.0).asInteger\})).play(2);\
\
\});\
\
)\
\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "The BBCut Library",\
Proceedings of ICMC 2002\
reproduced at http://www.cus.cam.ac.uk/~nc272/\
////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
}