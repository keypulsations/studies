{\rtf1\mac\ansicpg10000\cocoartf824
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\f1\b\fs30 \
SQPusher2
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 Superclass: BBCutProc
\f0\b0 \
\
This cut procedure was created by an automated analysis of track 'Come on my Selector' by Squarepusher, aka Tom Jenkinson. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 \ul \ulc0 Class Methods
\f0\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 *new(arg barfunc,repetitionfunc,scramble=0.0,quant=0.01, bpsd=0.5) 
\f0\b0   \
Create a SQPusher1 object with the given parameters.\
\
Note that this cut procedure always works in 4/4 with one bar phrases. \
\

\f1\b barfunc
\f0\b0  - Function that selects a bar from SQPusher2.seqdata (all 160 bars of Come On My Selector)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 repetitionfunc 
\f0\b0 - Function that determines how to group events in blocks (repetition groups)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 scramble- 
\f0\b0 chance of a bar being scrambled, rather than played back exactly as stored. \
\

\f1\b bpsd
\f0\b0  - beats per sub division. Sets a primitive cut size resolution for choose offset messages. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\cf2 \
(	\cf3 //defaults\cf2 \
\cf4 var\cf2  sf;\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/break2"\cf2 ,4);\
\
s.sync;\
\
\cf3 //3.33bps= 200 bpm\cf2 \
\cf4 BBCut2\cf2 (\cf4 CutBuf1\cf2 (sf),\cf4 SQPusher2\cf2 .new).play(2.9);\
\
\});\
)\
\
\
(	\cf3 //quantise to semiquavers\cf2 \
\cf4 var\cf2  sf;\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/break2"\cf2 ,4);\
\
s.sync;\
\
\cf3 //3.33bps= 200 bpm\cf2 \
\cf4 BBCut2\cf2 (\cf4 CutBuf1\cf2 (sf),\cf4 SQPusher2\cf2 (quant:0.25)).play(2.5);\
\
\});\
)\
\
\
(	\cf3 //fast cuts, half speed sample\cf2 \
\cf4 var\cf2  sf;\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/break"\cf2 ,16);\
\
s.sync;\
\
\cf3 //3.33bps= 200 bpm\cf2 \
\cf4 BBCut2\cf2 (\cf4 CutBuf1\cf2 (sf),\cf4 SQPusher2\cf2 .new).play(3.33);\
\
\});\
)\
\
\
\
\
\
\
\cf3 //UI controls\cf2 \
(\
\cf4 var\cf2  sf;\
\cf4 var\cf2  w,curdle, scramble,quant;\
	\
w = \cf4 SCWindow\cf2 (\cf5 "panel"\cf2 , \cf4 Rect\cf2 .new(200,200,230,180));\
curdle=\cf4 DDSlider\cf2 ( w, \cf4 Rect\cf2 .new(0,0,200,40), \cf5 "curdle"\cf2 , 0.0, 1.0, \cf6 'linear'\cf2 , 0.01, 0.0);\
scramble=\cf4 DDSlider\cf2 ( w, \cf4 Rect\cf2 .new(0,50,200,40), \cf5 "scramble"\cf2 , 0.0, 1.0, \cf6 'linear'\cf2 , 0.01, 0.0);\
quant=\cf4 DDSlider\cf2 ( w, \cf4 Rect\cf2 .new(0,100,200,40), \cf5 "quant"\cf2 , 0.0, 1.0, \cf6 'linear'\cf2 , 0.01, 0.0);\
\
w.front;	\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/Sounds/BOGDAN/dillbeat1"\cf2 ,8);\
\
s.sync;\
\
\cf3 //3.33bps= 200 bpm\cf2 \
\cf4 BBCut2\cf2 (\cf4 CutBuf1\cf2 (sf, 0.2),\cf4 SQPusher2\cf2 (\cf4 nil\cf2 ,\{\cf4 arg\cf2  bar; bar.curdle(curdle.value)\},\{scramble.value\},\{quant.value\})).play(3.33);\
\
\});\
\
\
)\
\
\
\
\cf3 //preserved original pitch via CutBuf3\cf2 \
(\
\cf4 var\cf2  sf;\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/Sounds/BOGDAN/dillbeat1"\cf2 ,8);\
\
s.sync;\
\
\cf3 //3.33bps= 200 bpm\cf2 \
\cf4 BBCut2\cf2 (\cf4 CutBuf3\cf2 (sf),\cf4 SQPusher2\cf2 .new).play(3.33);\
\});\
)\
\
\
\
\
(	\cf3 //two at once- sounds great on my machine at least! \cf2 \
\cf4 var\cf2  sf, clock;\
\
clock= \cf4 ExternalClock\cf2 (3.4).play;\
\
\cf4 Routine\cf2 .run(\{\
sf=\cf4 BBCutBuffer\cf2 .array([\cf5 "sounds/Sounds/bogdan/dillbeat1"\cf2 ,\cf5 "sounds/Sounds/bogdanunused/bogdanbeat1"\cf2 ],[8,8]);\
\
s.sync;\
\
\cf4 BBCut2\cf2 ([\cf4 CutBuf1\cf2 (sf[0],0.3), \cf4 CutMixer\cf2 (panfunc:\{[0.0,-1.0].wchoose([0.9,0.1])\})],\cf4 SQPusher2\cf2 (quant:\{[0.25,0.0].wchoose([0.9,0.1])\})).play(clock);\
\cf4 BBCut2\cf2 ([\cf4 CutBuf1\cf2 (sf[1],0.45),\cf4 CutMixer\cf2 (panfunc:\{[0.0,1.0].wchoose([0.9,0.1])\})],\cf4 SQPusher2\cf2 (quant:\{[0.25,0.0].wchoose([0.9,0.1])\})).play(clock);\
\
\});\
\
)\
\
\
\cf3 //SQPusher2.seqdata.size=160\cf2 \
\
(	\cf3 //two run off same routine, go through source rhythms in order, always make blocks of two\cf2 \
\cf4 var\cf2  sf, clock, counter;\
\
counter=159;\
\
clock= \cf4 ExternalClock\cf2 (3.4).play;\
\
\cf4 Routine\cf2 .run(\{\
sf=\cf4 BBCutBuffer\cf2 .array([\cf5 "sounds/Sounds/bogdan/dillbeat1"\cf2 ,\cf5 "sounds/Sounds/bogdanunused/bogdanbeat1"\cf2 ],[8,8]);\
\
s.sync;\
\cf4 BBCut2\cf2 ([\cf4 CutBuf2\cf2 (sf[0],0.3,dutycycle:0.5),\cf4 CutBuf2\cf2 (sf[1],0.45,\cf0 dutycycle:0.5\cf2 )],\cf4 SQPusher2\cf2 (\{\cf4 arg\cf2  data; counter=counter+1; data.wrapAt(counter)\},\{\cf4 arg\cf2  bar; bar.clump(2)\})).play(clock);\
\
\});\
\
)\
\
\
\
(	\cf3 //SQPusher FX\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 var\cf0  sf, clock, counter;\
\
counter=159;\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/break2"\cf2 ,4);\
\
s.sync;\
\cf4 BBCut2\cf2 ([\cf4 CutBuf2\cf2 (sf,0.3,\cf4 SQPushFXPitch2\cf2 .new(0.975,pbchance:0.7)),CutFXSwap1(3,0.3,0.4), \cf4 CutMixer\cf2 (0,1.0,\cf4 SQPushFXAmp2\cf2 .new(0.15),0.0)],\cf4 SQPusher2\cf2 (\cf0 \{\cf7 arg\cf0  data; counter=counter+1; data.wrapAt(counter**2-64)\},\{\cf7 arg\cf0  bar; bar.clump(3)\},scramble:0.25,quant:0.25\cf2 )).play(3.4);\
\
\});\
)\
\
\
(	\cf3 //SQPusher fx at original pitch of sample using BBCSKnownOffsets\cf2 \
\cf4 var\cf2  sf;\
\
\cf4 Routine\cf2 .run(\{\
sf= \cf4 BBCutBuffer\cf2 (\cf5 "sounds/break2"\cf2 ,4);\
\
s.sync;\
\
\cf4 BBCut2\cf2 ([\cf4 CutBuf3\cf2 (sf,0.3,pbsfunc:\cf4 SQPushFXPitch2\cf2 .new(0.96,pbchance:0.8)),\cf4 CutMixer\cf2 (0,1.0,\cf4 SQPushFXAmp2\cf2 .new(0.15),0.0)],\cf4 SQPusher2\cf2 (scramble:0.7)).play(3.4);\
\
\});\
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
(	\cf8 //two run off same routine, go through source rhythms in order, always make blocks of two\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 var\cf0  sf, clock, counter, amp,amp2;\
\
counter=159;\
amp=0.5;\
amp2=0.5;\
\
clock= \cf7 ExternalClock\cf0 (3.4).play;\
\
\cf7 Routine\cf0 .run(\{\
sf=\cf7 BBCutBuffer\cf0 .array([\cf9 "sounds/SCsamp/colloquium/beethoven1.wav"\cf0 ,\cf9 "sounds/Sounds/bogdanunused/bogdanbeat1"\cf0 ],[36,8]);\
\
s.sync;\
\cf7 BBCut2\cf0 ([[\cf7 CutBuf2\cf0 (sf[0],0.5,dutycycle:1.0),CutMixer(ampfunc:\{if(counter%5==0,\{amp=[0.5,0.1,1.0].wchoose([0.5,0.3,0.2])\}); amp\})],[\cf7 CutBuf2\cf0 (sf[1],0.45,dutycycle:0.75),CutMixer(ampfunc:\{if(counter%4==0,\{amp2=[0.25,0.05,0.5].wchoose([0.5,0.3,0.2])\}); amp2\})]],\cf7 SQPusher2\cf0 (\{\cf7 arg\cf0  data; counter=counter+1; data.wrapAt(counter)\},\{\cf7 arg\cf0  bar; bar.clump(4)\})).play(clock);\
\
\
\{\cf7 Pan2\cf0 .ar(\cf7 Limiter\cf0 .ar(5*(\cf7 SinOsc\cf0 .ar(\cf7 LFNoise0\cf0 .kr(3.4*0.25,30,50), 0, \cf7 LFNoise0\cf0 .kr(3.4*2,0.5,0.5)*SinOsc.kr(3.4*0.125,0,0.5,0.5))**5).clip2(0.7).distort,0.5),\cf7 SinOsc\cf0 .kr(3.4*0.125,0,0.2))\}.play;\
\
\});\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \

\fs24 \
}