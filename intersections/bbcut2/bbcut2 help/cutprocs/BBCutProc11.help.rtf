{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red191\green0\blue0;\red0\green0\blue0;
\red0\green0\blue191;\red96\green96\blue96;\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
BBCutProc11
\f2\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f2\b0 \
\
The original automatic breakbeat cutting algorithm as refined in the BreakBeatx series of classes. This cut procedure favours small odd number length cuts with respect to some subdiv integer for a phrase. A block consists of an original cut plus some number of repeats. A special fast 'stutter' or 'roll' can occur only to finish off a given phrase.\
   As is normal for cut procedures and synths, the value message is used to get the current value of any input parameter, so functions can be passed.  Defaults are provided for all arguments.\
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\
*
\f1\b new(sdiv, barlength, phrasebars, numrepeats, stutterchance, stutterspeed, stutterarea)
\f2\b0    \
Create a BBCutProc11 object with the given parameters.\
\

\f1\b sdiv
\f2\b0  - sub division.  A single measure is cut up into sdiv primitive units. So sdiv=8 over 4 beats gives\
eighth note resolution cutting.\

\f1\b barlength 
\f2\b0 - Normally set to 4.0 beats, for 4/4 bars, this can be altered to allow cuts over a different \
number of beats. So barlength= 3 gives cuts respecting 3/4. \

\f1\b phrasebars 
\f2\b0 - The length of the current phrase is barlength*phrasebars. \

\f1\b numrepeats 
\f2\b0 - Total number of repeats for normal cuts. So 2 corresponds to a particular size cut \
at one offset plus one exact repetition.\

\f1\b stutterchance
\f2\b0  - the tail of a phrase has this chance of becoming a repeating one unit cell stutter\
(0.0 to 1.0)\

\f1\b stutterspeed 
\f2\b0 - the stutter can be an integer multiple of the subdivision speed. For instance, if subdiv is\
8 (quavers) and stutterspeed is 2, then the stutter is in semiquavers (subdiv 16).\

\f1\b stutterarea -
\f2\b0  a stutter is permissible within this proportion of the last bar of a phrase. Use values larger than\
1 for stutters across multiple bars. The default is 0.5, for a half bar at 4/4.\
\

\f1\b \ul Instance Methods
\f2\b0 \ulnone \
\

\f1\b initBBCutProc11(sd, bl, pb, nr, sc, ss, sa) 
\f2\b0 Called internally after a new.\
\
Other methods are overrides of BBCutProc base class behaviour. BBCutProc11 will flag a roll when stuttering.\
\
Examples- You'll have to substitute your own break sample to hear the rhythmic aspects of this procedure\
properly\

\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf3 //must have run this line before any of the examples\cf4 \
f= \cf5 BBCutBuffer\cf4 (\cf6 "sounds/break"\cf4 ,8); \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //default cutups\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 BBCut2\cf0 (\cf7 CutBuf1\cf0 (f),\cf7 BBCutProc11\cf0 .new).play(2.4);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\cf4 	\cf3 //demonstrating tempo following from Server Clock control\cf4 \
\cf5 var\cf4  bbcut, pulse, clock;\
\
clock= \cf5 ServerClock.\cf4 new.play(100);\
\
bbcut= \cf5 BBCut2\cf4 (\cf5 CutBuf1\cf4 (f),\cf5 BBCutProc11\cf4 .new(8,4.0,2,3,0.5,3,1.0));\
\
pulse= \cf5 SynthDef\cf4 (\cf8 \\pulse\cf4 , \{\
\cf5 var\cf4  rate, impulse;\
\
rate= \cf5 MouseX\cf4 .kr(2,3);\
\
impulse= \cf5 Impulse\cf4 .kr(rate);\
\
\cf5 SendTrig\cf4 .kr(impulse, 100, rate);\
\
\cf5 Out\cf4 .ar(0,\cf5 Decay\cf4 .kr(impulse,0.1)*\cf5 SinOsc\cf4 .ar(440,0,0.5))\
\
\}).play;\
\
bbcut.play(clock); \
\
\cf0 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\cf4 \
	\cf3 //showing use of all parameters\cf4 \
\cf5 var\cf4  w;\
\cf5 var\cf4  slider,string;\
\cf5 var\cf4  num;\
\cf5 var\cf4  names,data, specs, lastval;\
\cf5 var\cf4  bbcutter, clock;\
\
names= [\cf6 "tempo"\cf4 ,\cf6 "cut"\cf4 ,\cf6 "phrasebars"\cf4 ,\cf6 "stutterchance"\cf4 ,\cf6 "stutterspeed"\cf4 ,\cf6 "restchance"\cf4 ,\cf6 "ampvariation"\cf4 ,\cf6 "panvariation"\cf4 ,\cf6 "numrepeats"\cf4 ,\cf6 "beatsperbar"\cf4 ,\cf6 "randomoffset"\cf4 ];\
\
data=	\cf3 //control spec data for ui controls\cf4 \
[\
[2.0,3.0,\cf8 \\exp\cf4 , 0.0,2.5],	\cf3 //tempo\cf4 \
[4,16,\cf8 \\lin\cf4 ,1,8],			\cf3 //cuts\cf4 \
[1,5,\cf8 \\lin\cf4 ,1,2],			\cf3 //phrasebars\cf4 \
[0.0,1.0,\cf8 \\lin\cf4 ,0.0,0.2],		\cf3 //stutterchance\cf4 \
[1,3,\cf8 \\lin\cf4 ,1,2],			\cf3 //stutterspeed\cf4 \
[0.0,1.0,\cf8 \\lin\cf4 , 0.0,0.0],	\cf3 //restchance\cf4 \
[0.0,1.0,\cf8 \\amp\cf4 , 0.0,1.0],	\cf3 //ampvariation\cf4 \
[0.0,1.0,\cf8 \\lin\cf4 , 0.0,0.0],	\cf3 //panvariation\cf4 \
[1,5,\cf8 \\lin\cf4 ,1,2],			\cf3 //numrepeats\cf4 \
[2.0,6.0,\cf8 \\lin\cf4 ,1.0, 4.0],	\cf3 //subdivision over x beats\cf4 \
[0.0,1.0,\cf8 \\lin\cf4 ,0.0, 0.0]	 	\cf3 //offsetchance \cf4 \
];\
\
specs= \cf5 Array\cf4 .fill(data.size, \{\cf5 arg\cf4  i; \cf5 ControlSpec\cf4 .performList(\cf8 \\new\cf4 , data.at(i))\});\
\
num= names.size;\
\
w = \cf5 SCWindow\cf4 (\cf6 "BBCutProc11 demo N.M.Collins 23/08/03"\cf4 , \cf5 Rect\cf4 .new(100, 500, 500, (30*num)));\
\
string= \cf5 Array\cf4 .fill(num);\
slider= \cf5 Array\cf4 .fill(num);\
\cf3 //Fill with defaults. This array will hold the updated last value of any GUI element\cf4 \
lastval= \cf5 Array\cf4 .fill(num, \{\cf5 arg\cf4  i; data.at(i).at(4);\}); \
\
num.do(\
\{\
\cf5 arg\cf4  i;\
\
\cf5 SCStaticText\cf4 ( w, \cf5 Rect\cf4 .new(5, (30*i)+5, 95,20)).string_(names.at(i));\
slider.put(i,\cf5 SCSlider\cf4 .new( w, \cf5 Rect\cf4 .new(105, (30*i)+5, 95,20)));\
\cf3 //set slider to default value, else will default to 0.0\cf4 \
slider.at(i).value_(specs.at(i).unmap(data.at(i).at(4)));\
string.put(i, \cf5 SCStaticText\cf4 ( w, \cf5 Rect\cf4 .new(205, (30*i)+5, 95,20)).string_(data.at(i).at(4)));\
\
slider.at(i).action_(\{\cf5 arg\cf4  sl; \
\cf5 var\cf4  val; val = specs.at(i).map(sl.value);  string.at(i).string_(val); \
lastval.put(i, val);  \cf3 //set associated variable to this value, bbcut code will poll this rather than the slider directly\cf4 \
\});\
\
\});\
\
w.front;\
\
bbcutter=\cf5 BBCut2\cf4 ([\
\cf5 CutBuf2\cf4 (f,\{lastval.at(10)\}),\
\cf5 CutMixer\cf4 (0,1.0,\{\
if(lastval.at(5).coin,	\cf3 //restchance\cf4 \
\{0\},\
\{\
rrand(lastval.at(6),1.0)\} \cf3 //amp variation\cf4 \
)\},	\
\{rrand(-1.0*(lastval.at(7)),lastval.at(7))\}) \cf3 //panvariation\cf4 \
],\
\cf5 BBCutProc11\cf4 .new(\
\{lastval.at(1)\},	\cf3 //cut\cf4 \
\{lastval.at(9)\},	\cf3 //sdbeats\cf4 \
\{lastval.at(2)\},	\cf3 //phrasebars\cf4 \
\{lastval.at(8)\},	\cf3 //numrepeats\cf4 \
\{lastval.at(3)\},	\cf3 //stutterchance\cf4 \
\{lastval.at(4)\}	\cf3 //stutterspeed\cf4 \
));\
\
clock=\cf5 ExternalClock\cf4 (\cf5 TempoClock\cf4 (lastval[0])).play;\
\
bbcutter.play(clock);\
\
\cf3 //update tempo ten times a second\cf4 \
\cf5 SystemClock\cf4 .sched(0.0,\{clock.tempoclock.tempo_(lastval.at(0)); 0.1\});\
\
\cf0 )\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //If you want fast varying time signatures set phrasebars=1, \
//and provide interconnected functions updating barlength and sdiv. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\cf4 	\cf3 //default eighth note cutups\cf4 \
\cf5 var\cf4  sf,newbarl,phrasecount;\
\
phrasecount=0;\
\
\cf5 BBCut2\cf4 (\cf5 CutBuf1\cf4 (f),\cf5 BBCutProc11\cf4 .new(\
\{\
newbarl=[4.0,3.0,3.5].wrapAt(phrasecount);		\cf3 //4/4 then 3/4 then 7/8 looping\cf4 \
phrasecount=phrasecount+1;\
newbarl*2	\cf3 //always eighth note cuts\cf4 \
\},\
\{newbarl\},\
1\
)).play(2.4);\
\
\cf0 )
\fs24 \

\fs18 \
\cf4 \
\
\cf3 ////////////\cf4 \
\cf5 For\cf4  additional data on the algorithm see\
\cf5 Nick\cf4  \cf5 Collins\cf4 , \cf6 "Algorithmic Composition Methods for BreakBeat Science"\cf4 ,\
\cf5 Proceedings\cf4  of \cf5 Music\cf4  \cf5 Without\cf4  \cf5 Walls\cf4 , \cf5 ISBN\cf4  1857213319\
reproduced at http:\cf3 //www.cus.cam.ac.uk/~nc272\cf4 \
\cf3 ////////////\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
}