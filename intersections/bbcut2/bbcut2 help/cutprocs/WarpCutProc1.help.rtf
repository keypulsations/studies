{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
WarpCutProc1
\f2\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f2\b0 \
\
Cutups in the style of Aphex Twin/ Bogdan Raczynski/ u-ziq  etc, that is, sometimes so fast that a pitch is heard.\
With this procedure you must specifiy the sizes of allowed blocks. Each block then has some probability to\
be a simple statement, or some type of roll (fast set of repetitions), either even or geometric series timed.\
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\
*
\f1\b new(blocksizefunc, rollfunc, probs, phraselength, accel, bpsd)
\f2\b0    \
Create a WarpCutProc1 object with the given parameters.\
\

\f1\b blocksizefunc
\f2\b0  - A function (or something else responding to value) returning the next block size.  The function\
will be passed the number of beatsleft in the current phrase, and the current phrase length in case judgement\
is to depend on position within a phrase.\

\f1\b rollfunc 
\f2\b0 - A function returning the number of cuts to subdivide a block in a roll. This function is passed the\
current blocklength as argument in case you want a decision to take account of how much space you divide.\

\f1\b probs 
\f2\b0 - An array of three probabilities (0.0 to 1.0). They are [prob of simple statement, prob of even roll, \
prob of accelerando rather than decelerando geometric series]. The algorithm cascades through one prob \
at a time. If a block is not simple, then it is a roll. If it isn't an even roll it is a geometric roll. \

\f1\b phraselength 
\f2\b0 - Next length of phrase in beats.\

\f1\b accel
\f2\b0  -a parameter to control the acceleration rate of the geometric series. Good values are 0.5 to 0.99.\
Do not pass 0.0 or 1.0 without expecting a crash.\

\f1\b bpsd
\f2\b0  - beats per sub division. Sets a primitive cut size resolution for choose offset messages. \
\

\f1\b \ul Instance Methods
\f2\b0 \ulnone \
\

\f1\b initWarpCutProc1 
\f2\b0 Called internally after a new.\
\
Other methods are overrides of BBCutProc base class behaviour. WarpCutProc1 will flag rolls for synthesis.\
\
Examples- You'll have to substitute your own break sample to hear the rhythmic aspects of this procedure\
properly perhaps, but the Warp cutter creates such bizarre effects that it's fun on any source. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 (	\cf2 //defaults\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
\
\cf3 Routine\cf0 .run(\{	\
	sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/a11wlk01.wav"\cf0 ,4);\
	\
	s.sync;\
	\
	\cf2 //144 bpm\cf0 \
	\cf3 BBCut2\cf0 (\cf3 CutBuf1\cf0 (sf),\cf3 WarpCutProc1\cf0 .new).play(2.4);\
\});\
\
)
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (	\cf2 //oddness on AudioIn \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut2\cf0 (\cf3 CutStream1\cf0 .new,\cf3 WarpCutProc1\cf0 (\{[1,2,4].wchoose([0.7,0.2,0.1])\},\{[9,19,29].choose\},[0.0,0.5,0.5],100.0,\{0.8+(0.15.rand)\})).play(2.2); \
)
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //roll through a sound with UI control\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\cf5 \
\cf6 var\cf5  w;\
\cf6 var\cf5  slider, num, data;\
\cf6 var\cf5  sf, bbcutter, clock;\
\
data=	\cf7 //control spec data for ui controls\cf5 \
[\
[\cf8 "tempo"\cf5 ,2,3,\cf9 \\lin\cf5 ,0.1,2.5],				\
[\cf8 "blocklength"\cf5 , 0, 2,\cf9 \\lin\cf5 ,1,1],			\
[\cf8 "roll"\cf5 , 0, 6,\cf9 \\lin\cf5 ,1,0],				\
[\cf8 "simpleprob"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.1,0.5],	\
[\cf8 "evenprob"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.1,0.5],		\
[\cf8 "accelprob"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.1,0.5],		\
[\cf8 "phraselength"\cf5 , 1.0, 5.0,\cf9 \\lin\cf5 ,1.0,2.0],		\
[\cf8 "accelparam"\cf5 , 0.5, 0.99,\cf9 \\lin\cf5 ,0.01,0.9],		\
[\cf8 "restchance"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.1,0.0],		\
[\cf8 "ampvariation"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.01,1.0],		\
[\cf8 "panvariation"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.01,0.0],		\
[\cf8 "randomoffset"\cf5 , 0.0, 1.0,\cf9 \\lin\cf5 ,0.01,0.0]\
];\
\
w = \cf6 SCWindow\cf5 (\cf8 "WarpCutProc1 demo N.M.Collins 23/08/03"\cf5 , \cf6 Rect\cf5 .new(100, 500, 500, (30*(data.size))));\
\
slider= \cf6 Array\cf5 .fill(data.size, \{\cf6 arg\cf5  i; \cf6 DDSlider\cf5 .performList(\cf9 \\new\cf5 ,[w, \cf6 Rect\cf5 (5,30*i, 300, 30)]++ data.at(i))\}); \
\
slider.at(1).slider.action_(\{\cf6 arg\cf5  sl; \
\cf6 var\cf5  val; val = slider.at(1).spec.map(sl.value);\
val= [1,3,5].at(val.round(1.0).asInteger);\
slider.at(1).string.string_(val); \
slider.at(1).lastval=val;  \
\});\
\
slider.at(1).lastval= 3;\
slider.at(2).string.string_(3);\
\
slider.at(2).slider.action_(\{\cf6 arg\cf5  sl; \
\cf6 var\cf5  val; val = slider.at(2).spec.map(sl.value);\
val= [3,5,7,11,13,17,19].at(val.round(1.0).asInteger);\
slider.at(2).string.string_(val); \
slider.at(2).lastval=val;  \
\});\
\
slider.at(2).lastval= 3;\
slider.at(2).string.string_(3);\
\
w.front;\
\
\
\cf6 Routine\cf5 .run(\{	\
	sf= \cf6 BBCutBuffer\cf5 (\cf8 "sounds/break"\cf5 ,8);\
	\
	s.sync;\
\
bbcutter= \cf6 BBCut2\cf5 ([\
\cf6 CutBuf1\cf5 (sf,\
slider.at(11) \cf7 //randomoffsetchance\cf5 \
),\
\cf6 CutMixer\cf5 (0,1.0,\{\
if(slider.at(8).value.coin,	\cf7 //restchance\cf5 \
\{0\},\
\{\
rrand(slider.at(9).value,1.0)\} \cf7 //amp variation\cf5 \
)\},\
\{rrand(-1.0*(slider.at(10).value),slider.at(10).value)\}	\cf7 //panvariation\cf5 \
)\
],\
\cf6 WarpCutProc1\cf5 (\
slider.at(1),	\cf7 //block\cf5 \
slider.at(2),	\cf7 //rollcut\cf5 \
[slider.at(3),slider.at(4),slider.at(5)],	\cf7 //probs\cf5 \
slider.at(6),	\cf7 //phraselength\cf5 \
slider.at(7)	\cf7 //accelparam\cf5 \
)\
); \
\
clock=\cf6 ExternalClock\cf5 (slider.at(0).lastval).play;\
\
bbcutter.play(clock);\
\
\cf7 //update tempo ten times a second\cf5 \
\cf6 SystemClock\cf5 .sched(0.0,\{clock.tempoclock.tempo_(slider.at(0).lastval); 0.1\});\
\
\});\
\cf0 )\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "further automatic BreakBeat cutting methods",\
Proceedings of Generative Art 2001\
reproduced at http://www.cus.cam.ac.uk/~nc272\
////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
\
}