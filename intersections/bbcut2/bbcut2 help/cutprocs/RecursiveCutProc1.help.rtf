{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
RecursiveCutProc1
\f2\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f2\b0 \
\
This class implements explicit recursive cutting, as described in LMJ13. \
The level of recursion can be set as a parameter of the cut procedure. \
The user chooses cut, repeat and offset functions which are applied through\
successive iteratinos to make new cut sequences. Only the final cut sequence of\
a cut sequence of a cut sequence... is rendered. \
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\

\f1\b *new(cutfunc,repeatfunc,offsetfunc,reclevel=2,phraselength=4.0,bpsd=0.5)\
 
\f2\b0 \
Create a RecursiveCutProc1 object with the given parameters.\
\

\f1\b cutfunc 
\f2\b0 - A user specified function determining the next cut size, passed the arguments \
phrase length filled so far and current phraselength. \

\f1\b repeatfunc 
\f2\b0 - A user specified function determining the number of repeats of the new cutsize, \
passed the arguments phrase length determined and current phraselength. \

\f1\b offsetfunc 
\f2\b0 - A user specified function determining the offset for the new block, passed the arguments \
quantise level (= currphraselength/beats per sub division, so one 4/4 bar phrase with bpsd 0.5 gives\
quantise level of 8, ie eighth notes) ,current beats per sub division,phrase completed so far and \
current phrase length. The default method is\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\{\cf3 arg\cf0  q,bpsubdiv; rrand(0,q - 1)*bpsubdiv\};  \cf2 //random offset into source
\f2\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 reclevel-
\f2\b0  Level of recursion, so 0 gives back the source exactly, 1 is one cutup, 4 is \
four recursive cutups. The higher the reclevel , the greater the performance hit at the start of the phrase.\
Outside realtime rendering is required for very high values, and the output will be increasingly set on one \
offset at a greatest common divisor cut size (see the paper for technical analysis). Notes however that the \
CPU cost is in the language app, not the server. In implicit cutting, the cost is in the Server.\

\f1\b phraselength 
\f2\b0 - Next length of phrase in beats.\

\f1\b bpsd -
\f2\b0  beats per sub division.\
\

\f1\b \ul Instance Methods
\f2\b0 \ulnone \
\

\f1\b initRecCutProc 
\f2\b0 Called internally after a new.\
\

\f1\b chooseblock
\f2\b0 - this uses the setoffset method of BBCutSynth to specify offset jumps relative to the\
current phrase size. In normal use phrasesize will be the same as the beat length of the source you wish \
to cut up. Note that sources which don't respond to setoffset will not be effected by RecCutProc except\
for any enveloping/panning etc caused by blocks. \
\
Examples- \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\
\cf2 //you must have run this line before any of the examples below\cf0 \
f= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8); \
\
\
\cf2 //defaults\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut2\cf0 (\cf3 CutBuf2\cf0 (f), \cf3 RecursiveCutProc1\cf0 .new).play(2);\
\
\
\
\
(\cf5 //20 recursion levels with simple user defined functions plus quick delay hack\cf6 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf7 var\cf6  sf, group;\
\
group=\cf7 Group\cf6 .new;\
\
\cf7 Routine\cf6 .run(\{\
\
//f=\cf7 BBCutBuffer\cf6 (\cf8 "sounds/a11wlk01.wav"\cf6 ,4); \
\
s.sync;\
\
\cf7 BBCut2\cf6 (\cf7 CutGroup\cf6 (\cf7 CutBuf2\cf6 (f, pbsfunc:\{rrand(0.98,1.02)\}),\cf7 Group\cf6 .before(group)), \cf7 RecursiveCutProc1\cf6 .new(\{[4.0,2.5,1.5].choose\},\{rrand(1,3)\},\{[0.0,2.0].choose\},20)\
).play(4);\
\
\{\cf7 var\cf6  in; \
\
in= \cf7 In\cf6 .ar(0,2);\
\
\cf7 ReplaceOut\cf6 .ar(0, \cf7 CombN\cf6 .ar(0.3*in, 0.25, 0.25, 20, 1, 0.7*in))\}.play(group);\
\
\});\
\
\cf0 )\
\
\
\
(\cf2 //recursion level control\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w,slider;\
	\
w = \cf3 SCWindow\cf0 (\cf4 "panel"\cf0 , \cf3 Rect\cf0 .new(200,200,200,100));\
slider=\cf3 DDSlider\cf0 ( w, \cf3 Rect\cf0 .new(5,5,180,40), \cf4 "recursion level"\cf0 , 0, 50, \cf9 'linear'\cf0 , 1, 0);\
\
w.front;\
\
\cf3 BBCut2\cf0 (\cf3 CutBuf2\cf0 (f), \cf3 RecursiveCutProc1\cf0 .new(reclevel:slider)).play(2);\
)\
\
\
(\cf2 //user defined functions\cf0 \
\cf3 var\cf0  w,slider;\
\cf3 var\cf0  cutfunc, repeatfunc, offsetfunc;\
\
cutfunc= \{\cf3 arg\cf0  done, currpl; if((done<(currpl*0.7)), \{[1.5,0.5].choose\},\{[0.25,1.0].choose\});\};\
repeatfunc= \{\cf3 arg\cf0  done, currpl; if((done<(currpl*0.7)), \{1\},\{rrand(1,3)\});\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //3/4 of the time let through what is there already, otherwise a random offset\cf0 \
offsetfunc= \{\cf3 arg\cf0  q, bpsd, done, currphraselength; if(0.75.coin, \{done%(q*bpsd)\},\{(q.rand)*bpsd\});\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut2\cf0 (\cf3 CutBuf2\cf0 (f), \cf3 RecursiveCutProc1\cf0 .new(cutfunc, repeatfunc, offsetfunc,3, 8.0)).play(2);\
)\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //as a comparison, here is the easier but more CPU expensive implicit recursive method\cf0 \
\cf2 //implicit recursive cutting, nth order\cf0 \
\
\cf2 //this code assumes 8 out busses 0-7, 8 in (8-15 = 1-8 for AudioIn UGen)\cf0 \
\cf2 //then spare audio busses from 16 up\
\cf0 \
\cf2 //There will be a delay in hearing output proportional to n since the \cf0 \
\cf2 //various audio capture devices need to be capturing a flow before \cf0 \
\cf2 //the next can capture a flow, passing down to the final one. \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  clock, n;\
\cf3 var\cf0  source, reccutters;\
\cf3 var\cf0  group;\
\
group=\cf3 Group\cf0 .new;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //number of levels of recursive audio cutting\cf0 \
\cf2 //be careful, costs go up for large n...\cf0 \
n=4; \
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.6)).play;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 Routine\cf0 .run(\{\
\
source=\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 ([\cf3 CutBuf2\cf0 (f),\cf3 CutMixer\cf0 (16,1.0,1.0,0.0)],\cf3 Group\cf0 .head(group),numChannels:1));\
\
reccutters= \cf3 Array\cf0 .fill(n);\
\
n.do(\{\cf3 arg\cf0  i; \
reccutters.put(i, \cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 ([\cf3 CutStream1\cf0 ((2*i)+16, atkprop:0.02, relprop:0.02),\cf3 CutMixer\cf0 ((2*i)+18,1.0,1.0,0.0)],\cf3 Group\cf0 .tail(group),numChannels:2)));\
\});\
\
\{\cf3 Out\cf0 .ar(0,\cf3 In\cf0 .ar((2*n)+16,2))\}.play(\cf3 Group\cf0 .tail(group));\
\
s.sync;\
\});\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //give it all chance to set up- can do without this, just being safe\cf0 \
\cf2 //Task(\{\cf0 \
\cf2 //1.0.wait;\cf0 \
source.play(clock);\
reccutters.do(\{\cf3 arg\cf0  val; val.play(clock);\});\
\cf2 //nil\cf0 \
\cf2 //\}).start;\cf0 \
\
\
)\
\
\
\
\
\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "Recursive Audio Cutting",\
Leonardo Music Journal 13\
////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs24 \cf0 \
}