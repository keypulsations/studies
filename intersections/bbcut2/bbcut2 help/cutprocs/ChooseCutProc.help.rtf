{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs30 \cf0 \
ChooseCutProc
\f2\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 Superclass: BBCutProc
\f2\b0 \
\
This cut procedure allows the user to specify a set of allowable cuts and repeats. It allows a roll at the end of a phrase. It is therefore a cross between BBCutProc11 (which automates what size cuts are permissible for a given subdiv rate) and WarpCutProc1.  Derive new classes from this overriding the default instance methods to create advanced extensions of this paradigm; else pass in your own functions.\
\

\f1\b \ul Class Methods
\f2\b0 \ulnone \
\
*
\f1\b new(cutsizefunc, repeatfunc, rollfunc, phraselength, rollchance, rollallowed, bpsd)
\f2\b0    \
Create a ChooseCutProc object with the given parameters.\
\

\f1\b cutsizefunc
\f2\b0  - A function (or something else responding to value) returning the next primitive cut size.  \
The function will be passed the beat position within the current phrase, and the current phrase length to\
assist judgement. The main code will automatically reduce cut sizes/ num repeats where necessary to fit\
the next block into a phrase.\

\f1\b repeatfunc 
\f2\b0 - an object responding to the value message with the number of desired total repetitions of\
the cutsize just chosen. A block is of length cutsize*repeats. The just chosen cutsize, beat position and current\
phrase length are passed as arguments to value.\

\f1\b rollfunc 
\f2\b0 - A function returning an array of cuts that are a roll. The blocksize to subdivide is passed as the\
argument to value.\

\f1\b phraselength 
\f2\b0 - Next length of phrase in beats.\

\f1\b rollchance
\f2\b0  - A probability of a roll near the end of a phrase.\

\f1\b rollallowed
\f2\b0  - number of beats within sight of the end of the current phrase within which a roll is permissible.\
(these two parameters are like stutterchance and stutterarea in BBCutProc11, but since the rollfunc works \
out any general cut sequence for a roll, there is no stutterspeed)\

\f1\b bpsd
\f2\b0  - beats per sub division. Sets a primitive cut size resolution for choose offset messages. \
\

\f1\b \ul Instance Methods
\f2\b0 \ulnone \
\

\f1\b initChooseCutProc 
\f2\b0 Called internally after a new.\
\

\f1\b chooseblock
\f2\b0 - no need to override this central cut procedure in derived classes if you can just  \
override the default methods 
\f1\b cutsizedefault
\f2\b0 , 
\f1\b repeatfuncdefault
\f2\b0 , 
\f1\b rollfuncdefault
\f2\b0 .\
\
Examples- Substitute your own break sample to hear this properly\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\
\cf2 //you must have run this line before any of the examples below\cf0 \
f= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8); \
\
\
\cf2 //default cutups at 144bpm\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut2\cf0 (\cf3 CutBuf1\cf0 (f),\cf3 ChooseCutProc\cf0 .new).play(2.4);\
\
\
(	\cf2 //choosecutproc- own functions\cf0 \
\cf3 var\cf0  owncutfunc,ownrepfunc,ownrollfunc;\
\
owncutfunc=\
\{\
\cf3 arg\cf0  pos,currlength;	\cf2 //prop is phrasepos/currphraselength\cf0 \
\cf3 var\cf0  prop;\
prop=pos/currlength;\
\
[0.5,1.5,2.5].wchoose([0.1+(0.6*prop),0.2+0.6*(1-prop),0.1])\
\};\
\
ownrepfunc=\
\{\
\cf3 arg\cf0  cutsize,pos,currlength;\
[1,2,3,5].wchoose([0.3,0.4,0.2,0.1])\
\};\
\
ownrollfunc=\
\{\
\cf3 arg\cf0  blocksize;\
\
blocksize*[0.24,0.53,0.23]	\cf2 //[0.02,0.05,0.15,0.18,0.2,0.4]\cf0 \
\};\
\
\
\cf3 BBCut2\cf0 (\cf3 CutBuf1\cf0 (f),\cf3 ChooseCutProc\cf0 (owncutfunc,ownrepfunc,ownrollfunc,8.0,0.5,3.0,0.25)).play(2);\
)\
\
\
\
\
\
(	\cf2 //choose available cuts from a ui!\cf0 \
\cf3 var\cf0  sf;\
\cf3 var\cf0  w,slider;\
\cf3 var\cf0  owncutfunc,ownrepfunc;\
	\
w = \cf3 SCWindow\cf0 (\cf4 "panel"\cf0 , \cf3 Rect\cf0 .new(128, 64, 186, 90));\
slider=\cf3 DDSlider\cf0 ( w, \cf3 Rect\cf0 .new(32, 28, 128, 40), \cf4 "which cut set"\cf0 , 0, 1, \cf5 'linear'\cf0 , 1, 0);\
\
w.front;\
\
owncutfunc=\
\{\
\cf3 arg\cf0  pos,currlength;	\cf2 //prop is phrasepos/currphraselength\cf0 \
if((slider.value.round(1.0).asInteger) <1,\
\{[0.5,1.5].choose\}\
,\
\{[0.25,0.75,1.25].choose\}\
)\
\};\
\
ownrepfunc=\
\{\
\cf3 arg\cf0  cutsize,pos,currlength;\
[1,2].wchoose([0.3,0.7])\
\};\
\
\cf3 BBCut2\cf0 (\cf3 CutBuf1\cf0 (f),\cf3 ChooseCutProc\cf0 (owncutfunc,ownrepfunc,\cf3 nil\cf0 ,8.0,0.5,3.0,0.25)).play(2);\
)\
\
\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "Further Automatic BreakBeat Cutting Methods",\
Proceedings of Generative Art 2001\
reproduced at http://www.cus.cam.ac.uk/~nc272/\
////////////\
\
\
\
}