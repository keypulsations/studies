{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Bold;
\f3\fswiss\fcharset77 ArialMS;\f4\fswiss\fcharset77 Arial-ItalicMS;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red51\green51\blue153;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 AutoTrack
\f1\b0 \
\
Autocorrelation beat tracker, following:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs26 \cf0 M. E. P. Davies and M. D. Plumbley. \cf3 Beat Tracking With A Two State Model\cf0 . 
\f4 Proceedings of the IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP 2005)
\f3 , Philadelphia, USA, March 19-23, 2005
\f1\fs24 \
\
This is my own adaptation for my beat tracking research and uses my own C implementation of Matthew Davies' original MATLAB model. Meanwhile, Paul Brossier and Matthew have been preparing their own realtime version for Paul's aubio library.  \
\
There are four k-rate outputs, being ticks at quarter, eighth and sixteenth level from the determined beat, and the current detected tempo. \
\
Note the following restrictions:\
\
This beat tracker determines the beat, biased to the midtempo range by weighting functions. It does not determine the measure level, only a tactus. It is also slow reacting, using a 6 second temporal window for it's autocorrelation maneouvres. Don't expect human musician level predictive tracking. \
\
On the other hand, it is tireless, relatively general (though obviously best at transient 4/4 heavy material without much expressive tempo variation), and can form the basis of computer processing that is decidedly faster than human. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 \ul \ulc0 Class Methods
\f1\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 *ar(in,lock)\
\
in- 
\f1\b0 Audio input to track
\f2\b \
\
lock- 
\f1\b0 If this argument is greater than 0.5, the tracker will lock at its current periodicity and continue from the current phase. Whilst it updates the model's phase and period, this is not reflected in the output until lock goes back below 0.5.  
\f2\b \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //choose some file you want to track off your hard drive (mono)\cf0 \
b=\cf4 Buffer\cf0 .read(s,\cf5 "/Volumes/data/stevebeattrack/samples/100.wav"\cf0 );\
\
(\
a= \cf4 SynthDef\cf0 (\cf6 \\help_autotrack\cf0 ,\{\cf4 arg\cf0  vol=1.0, beepvol=1.0, lock=0;\
\cf4 var\cf0  trackb,trackh,trackq,tempo;\
\cf4 var\cf0  source, beep;\
\
source= \cf4 PlayBuf\cf0 .ar(1,b.bufnum,1.0,1,0,1);\
\
#trackb,trackh,trackq,tempo=\cf4 AutoTrack\cf0 .kr(source, lock);\
\
beep= \cf4 SinOsc\cf0 .ar(1000,0.0,\cf4 Decay\cf0 .kr(trackb,0.1));\
\
\cf4 Out\cf0 .ar(0,\cf4 Pan2\cf0 .ar((vol*source)+(beepvol*beep),0.0));\
\
\}).play;\
)\
\
a.set(\cf6 \\vol\cf0 ,0.0);\
\
a.set(\cf6 \\beepvol\cf0 ,1.0);\
\
a.set(\cf6 \\lock\cf0 ,1); \cf2 //fix it rigidly from current phase/period solution\cf0 \
\
a.set(\cf6 \\lock\cf0 ,0); \cf2 //unfix, back to tracking\cf0 \
\
\
\
\
\
\
\
\cf2 //track audio in (try clapping a beat or beatboxing, but allow up to 6 seconds for tracking to begin) and spawning stuff at quarters, eighths and sixteenths\cf0 \
(\
\cf4 SynthDef\cf0 (\cf6 \\help_autotrack2\cf0 ,\{\
\cf4 var\cf0  trackb,trackh,trackq,tempo;\
\cf4 var\cf0  source;\
\cf4 var\cf0  bsound,hsound,qsound;\
\
source= \cf4 AudioIn\cf0 .ar(1);\
\
#trackb,trackh,trackq,tempo=\cf4 AutoTrack\cf0 .kr(source);\
\
bsound= \cf4 Pan2\cf0 .ar(\cf4 LPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackb,0.05)),1000),0.0);\
\
hsound= \cf4 Pan2\cf0 .ar(\cf4 BPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackh,0.05)),3000,0.66),-0.5);\
\
qsound= \cf4 Pan2\cf0 .ar(\cf4 HPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackq,0.05)),5000),0.5);\
\
\cf4 Out\cf0 .ar(0, bsound+hsound+qsound);\
\}).play;\
)\
\
\
\
}