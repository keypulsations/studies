{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Bold;
\f3\fswiss\fcharset77 ArialMS;\f4\fswiss\fcharset77 Arial-ItalicMS;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red51\green51\blue153;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 DrumTrack
\f1\b0 \
\
Crosscorrelation search and drum pattern matching beat tracker, as described in:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs26 \cf0 N Collins. \cf3 Drum Track: Beat Induction from an Acoustic Drum Kit with Synchronised Scheduling\cf0 . 
\f4 Proceedings of the International Computer Music Conference (ICMC)
\f3 , Barcelona, Sept 4-9, 2005
\f1\fs24 \
\
(with special reference to the work of Jean Laroche on cross correlation/dynamic programming and Masataka Goto on drum detection and pattern spotting).\
\
This beat tracker was devised for concert applications in tracking an acoustic drum kit, but can also be used on polyphonic audio (for pop signals with drums). \
\
There are four k-rate outputs, being ticks at quarter, eighth and sixteenth level from the determined beat, and the current detected tempo. \
\
Tempi of 90bpm to 190bpm are the allowed options. A tempo weighting prior can be set via a 100 float buffer. The default is a flat profile; the concert allowed for drum and bass speed drumming. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 \ul \ulc0 Class Methods
\f1\b0 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 *ar(in,lock, dynleak, tempowt,phasewt, basswt, patternwt, prior,kicksensitivity,snaresensitivity, debugmode)\
\
in- 
\f1\b0 Audio input to track
\f2\b \
\
lock- 
\f1\b0 If this argument is greater than 0.5, the tracker will lock at its current periodicity and continue from the current phase. Whilst it updates the model's phase and period, this is not reflected in the output until lock goes back below 0.5.  \
\
You might want to play around with the following parameters, their meaning is explained in the academic paper.
\f2\b \
\
dynleak- 
\f1\b0 Coefficient of leaky integrator in causal dynamic programming routine
\f2\b \
\
phasewt- 
\f1\b0 Weighting for phase transition cost
\f2\b \
\
tempowt- 
\f1\b0 Weighting for tempo transition cost
\f2\b \
\
basswt- 
\f1\b0 Weighting for low frequency evidence
\f2\b \
\
patternwt- 
\f1\b0 Weighting for drum pattern evidence
\f2\b \
\
prior- 
\f1\b0 If a nonnegative integer, denotes a 100 float Buffer where a weighting curve for tempi resides, from 90 bpm to 189 bpm in steps of 1.
\f2\b \
\
kicksensitivity- 
\f1\b0 Multiplier for the kick drum detector's sensitivity. 1.0 is the default, increase for less senstive, decrease for more.
\f2\b \
\
snaresensitivity- 
\f1\b0 Multiplier for the snare drum detector's sensitivity. 1.0 is the default, increase for less senstive, decrease for more.
\f2\b \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 debugmode- 
\f1\b0 0 for no debug information; 1 prints information on winning drum pattern matches and transitions to new phases/periods. 2 prints whenever a kick or snare is detected to help with fine tuning the kick and snare sensitivity.  
\f2\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //choose some file you want to track off your hard drive (mono)\cf0 \
b=\cf4 Buffer\cf0 .read(s,\cf5 "/Volumes/data/stevebeattrack/samples/051.wav"\cf0 );\
\
(\
a= \cf4 SynthDef\cf0 (\cf6 \\help_drumtrack\cf0 ,\{\cf4 arg\cf0  vol=1.0, beepvol=1.0, lock=0, kick=1, snare=1;\
\cf4 var\cf0  trackb,trackh,trackq,tempo;\
\cf4 var\cf0  source, beep;\
\
source= \cf4 PlayBuf\cf0 .ar(1,b.bufnum,1.0,1,0,1);\
\
#trackb,trackh,trackq,tempo=\cf4 DrumTrack\cf0 .kr(source, lock,kicksensitivity:kick,snaresensitivity:snare,debugmode:2);\
\
beep= \cf4 SinOsc\cf0 .ar(1000,0.0,\cf4 Decay\cf0 .kr(trackb,0.1));\
\
\cf4 Out\cf0 .ar(0,\cf4 Pan2\cf0 .ar((vol*source)+(beepvol*beep),0.0));\
\
\}).play;\
)\
\
a.set(\cf6 \\vol\cf0 ,0.0);\
\
a.set(\cf6 \\beepvol\cf0 ,1.0);\
\
a.set(\cf6 \\kick\cf0 ,0.2);\
a.set(\cf6 \\snare\cf0 ,0.7);\
\
a.set(\cf6 \\lock\cf0 ,1); \cf2 //fix it rigidly from current phase/period solution\cf0 \
\
a.set(\cf6 \\lock\cf0 ,0); \cf2 //unfix, back to tracking\cf0 \
\
\
\
\
\
\
\
\cf2 //track audio in (try clapping a beat or beatboxing, but allow up to 6 seconds for tracking to begin) and spawning stuff at quarters, eighths and sixteenths\
\
//tempo prior\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 var\cf0  mean, stddev, constant;\
mean=30;\
stddev=10;\
constant= -0.5/(stddev.squared); \cf2 //no need for front term on Gaussian since normalizeSum ignores 1/(stddev*(2pi.sqrt));\cf0 \
\
a = (\cf4 Array\cf0 .fill(100,\{\cf4 arg\cf0  i; exp(((i-mean).squared)*constant)\})).normalizeSum; \cf2 //Gaussian around 120 bpm (=index 30)\cf0 \
\
\cf4 Post\cf0  << a << nl;\
b = \cf4 Buffer\cf0 .sendCollection(s, a, 1, 0, \{\cf4 arg\cf0  buf; \cf5 "finished"\cf0 .postln;\});\
)\
		\
(\
\cf4 SynthDef\cf0 (\cf6 \\help_drumtrack2\cf0 ,\{\
\cf4 var\cf0  trackb,trackh,trackq,tempo;\
\cf4 var\cf0  source;\
\cf4 var\cf0  bsound,hsound,qsound;\
\
source= \cf4 AudioIn\cf0 .ar(1);\
\
#trackb,trackh,trackq,tempo=\cf4 DrumTrack\cf0 .kr(source,prior:(b.bufnum));\
\
bsound= \cf4 Pan2\cf0 .ar(\cf4 LPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackb,0.05)),1000),0.0);\
\
hsound= \cf4 Pan2\cf0 .ar(\cf4 BPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackh,0.05)),3000,0.66),-0.5);\
\
qsound= \cf4 Pan2\cf0 .ar(\cf4 HPF\cf0 .ar(\cf4 WhiteNoise\cf0 .ar*(\cf4 Decay\cf0 .kr(trackq,0.05)),5000),0.5);\
\
\cf4 Out\cf0 .ar(0, bsound+hsound+qsound);\
\}).play;\
)\
\
\
\
}