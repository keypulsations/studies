{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\
\
\cf2 //beat induction and event capture from audio in- you set the tempo and provide the source material- beat box away, play an instrument etc\
//warning- because the beat tracker can take some time to adjust to your input (up to 6 seconds) you may have to play against conflicting material at times. \cf0 \
\
(\
\cf3 var\cf0  trackbus, trackgroup;\
\
s.latency=0.05;\
\
\cf2 //clear any existing OSCresponder\cf0 \
\cf3 OSCresponder\cf0 .all.do(\{\cf3 arg\cf0  val; if(val.cmdName==\cf4 '/tr'\cf0 ,\{\cf3 OSCresponder\cf0 .remove(val)\}); \});\
\
\cf2 //run a line at a time\cf0 \
~clock= \cf3 ServerClock\cf0 .new;	\
	\
~clock.play(100,s); \cf2 //will wait on trigID 100\cf0 \
	\
~database=\cf3 AnalyseEventsDatabase\cf0 .new;	\
	\
\cf3 Routine\cf0 .run(\{\
\
\cf2 //adding a Limiter to the output before record\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\limiter\cf0 ,\{\cf3 ReplaceOut\cf0 .ar(0,\cf3 Limiter\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.99))\}).play(\cf3 Group\cf0 .after(\cf3 Node\cf0 .basicNew(s,1)));\
\
~trackbus=\cf3 Bus\cf0 .audio(s,1);\
\
trackgroup= \cf3 Group\cf0 .before(\cf3 Node\cf0 .basicNew(s,1));\
\
\cf2 //run a beat tracker on the Server which sends the appropriate OSC message\cf0 \
~tracksynth= \cf3 SynthDef\cf0 (\cf4 \\help_cutstream3\cf0 ,\{\cf3 arg\cf0  vol=1.0, beepvol=0.0, lock=0;\
\cf3 var\cf0  trackb,trackh,trackq,tempo;\
\cf3 var\cf0  source, beep;\
\
source= \cf3 AudioIn\cf0 .ar(1);\
\
\cf2 //see AutoTrack help file\cf0 \
#trackb,trackh,trackq,tempo=\cf3 AutoTrack\cf0 .kr(source, lock);\
\
beep= \cf3 SinOsc\cf0 .ar(1000,0.0,\cf3 Decay\cf0 .kr(trackb,0.1));\
\
\cf3 Out\cf0 .ar(~trackbus.index,source);\
\
\cf3 Out\cf0 .ar(0,\cf3 Pan2\cf0 .ar((vol*source)+(beepvol*beep),0.0));\
\
\cf3 SendTrig\cf0 .kr(trackb,100,tempo);	\cf2 //sends with ID of 100 matching what clock expects\cf0 \
\
\}).play(trackgroup);\
\
\cf2 //creates at tail of trackgroup\cf0 \
~database.analyse(~trackbus.index, 101, trackgroup, 0.34, ~clock); \cf2 //trigID 101 is default\cf0 \
\
\});\
\
)\
\
\cf2 //default is add to head of group at Node 1 CutGroup\cf0 \
a=\cf3 BBCut2\cf0 (\cf3 CutStream3\cf0 (~database, 4, 0.0, 0.0,\cf3 false\cf0 ,\cf3 false\cf0 ), \cf3 ChooseCutProc\cf0 (1,2)).pan_(0.0).amp_(0.3).play(~clock);\
\
b=\cf3 BBCut2\cf0 (\cf3 CutStream3\cf0 (~database, 4, 0.0, 0.0,\cf3 false\cf0 ,\cf3 false\cf0 ), \cf3 BBCutProc11\cf0 .new).pan_(0.5).amp_(0.3).play(~clock);\
\
c=\cf3 BBCut2\cf0 (\cf3 CutStream3\cf0 (~database, 4, 0.0, 0.0,\cf3 false\cf0 ,\cf3 false\cf0 ), \cf3 ChooseCutProc\cf0 (0.5,4)).pan_(-0.5).amp_(0.3).play(~clock);\
\
\cf2 //these other two use alternative CutStream objects, no event marked up database here, just whatever gets recorded direct\cf0 \
d=\cf3 BBCut2\cf0 ([\cf3 CutBRF1\cf0 .new,\cf3 CutStream1\cf0 (~trackbus.index)], \cf3 ChooseBlockProc\cf0 (1.0,\{[1,2,4,8].choose\})).pan_(-0.6).amp_(0.3).play(~clock);\
\
e=\cf3 BBCut2\cf0 ([\cf3 CutRev1\cf0 .new,\cf3 CutStream2\cf0 (~trackbus.index,offset:3)], \cf3 BBCutProc11\cf0 .new).pan_(0.6).amp_(0.3).play(~clock);\
\
\
~tracksynth.set(\cf4 \\vol\cf0 ,0.0);\
\
~tracksynth.set(\cf4 \\beepvol\cf0 ,1.0);\
\
~tracksynth.set(\cf4 \\lock\cf0 ,1);\
\
\
a.end;\
b.end;\
c.end;\
d.end;\
e.end;\
\
~clock.stop;\
~database.stop;\
\
}