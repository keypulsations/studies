{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\
(\
\cf3 var\cf0  sf, clock, cutsynth, cutproc;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.7725));			\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break2"\cf0 ,4);\
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
cutsynth= \cf3 CutBuf2\cf0 (sf, dutycycle: \cf3 CutPBS1\cf0 (\{rrand(0.8,1.0)\}, 0));\
cutproc=\cf3 BBCutProc11\cf0 (phrasebars:2, stutterchance:0.8, stutterspeed:\{[2,8].wchoose([0.7,0.3])\});\
\
\cf3 BBCut2\cf0 (cutsynth,cutproc).play(clock);\
\});\
\
)\
\
\
\
\cf2 //example streaming source sound\cf0 \
\{\cf3 Out\cf0 .ar(1,\cf3 Resonz\cf0 .ar(\cf3 Saw\cf0 .ar(\cf3 LFNoise0\cf0 .ar(2.7725*0.25,20,60).round(3.7),4),1000,\cf3 SinOsc\cf0 .kr(2.7725*0.25,0,0.3,0.4)))\}.play;\
\
\
\
(	\cf2 //cut attack on stream\cf0 \
\cf3 var\cf0  cutsynth, cutproc;\
\
\{\cf3 Out\cf0 .ar(16,\cf3 Resonz\cf0 .ar(\cf3 Saw\cf0 .ar(\cf3 LFNoise0\cf0 .ar(2.7725*0.25,20,60).round(3.7),4),1000,\cf3 SinOsc\cf0 .kr(2.7725*0.25,0,0.3,0.4)))\}.play;\
\
cutsynth= \cf3 CutStream1\cf0 (16, dutycycle:\{rrand(0.8,1.0)\});\
cutproc=\cf3 BBCutProc11\cf0 (phrasebars:2, stutterchance:0.8, stutterspeed:\{[2,8].wchoose([0.7,0.3])\});\
\
\cf3 BBCut2\cf0 (cutsynth,cutproc).play(2.7725);\
)\
\
(	\cf2 //all at once\cf0 \
\cf3 var\cf0  sf,cutsynth1, cutsynth2, cutsynth3, cutproc;\
\
\{\cf3 Out\cf0 .ar(16,\cf3 Resonz\cf0 .ar(\cf3 Saw\cf0 .ar(\cf3 LFNoise0\cf0 .ar(2.7725*0.25,20,60).round(3.7),4),1000,\cf3 SinOsc\cf0 .kr(2.7725*0.25,0,0.3,0.4)))\}.play(\cf3 Group\cf0 .head(\cf3 RootNode\cf0 .new));\
\
\{\cf3 Out\cf0 .ar(17,\cf3 Resonz\cf0 .ar(\cf3 Mix\cf0 .ar(\cf3 LFTri\cf0 .ar(\cf3 Array\cf0 .fill(3,\{\cf3 arg\cf0  i; \cf3 LFNoise0\cf0 .ar(2.7725*0.25,200,600).round(3.7)\}),1)),1000,\cf3 SinOsc\cf0 .kr(2.7725*0.125,0,0.3,0.4)))\}.play(\cf3 Group\cf0 .head(\cf3 RootNode\cf0 .new));\
\
\cf3 Routine\cf0 .run(\{\
	\
sf=\cf3 BBCutBuffer\cf0 (\cf4 "sounds/break2"\cf0 ,4);\
\
s.sync;\
\
cutsynth1= [\cf3 CutBuf2\cf0 (sf, dutycycle: \cf3 CutPBS1\cf0 (\{rrand(0.8,1.0)\}, 0))];\
cutsynth2= [\cf3 CutStream1\cf0 (16, dutycycle: \{rrand(0.3,1.0)\})];\
cutsynth3= [\cf3 CutStream2\cf0 (17, dutycycle: \cf3 CutPBS1\cf0 (\{rrand(0.8,1.0)\}, 0)),\cf3 CutMixer\cf0 (0,1,1,panfunc:\{0.5.rand2\})];\
cutproc=\cf3 BBCutProc11\cf0 .new(phrasebars:2, stutterchance:0.8, stutterspeed:\{[2,8].wchoose([0.7,0.3])\});\
\
\cf3 BBCut2\cf0 ([cutsynth1,cutsynth2,cutsynth3],cutproc).play(2.7725);\
\
\});\
\
)\
\
\
a=\{\cf3 ReplaceOut\cf0 .ar(0,\cf3 Resonz\cf0 .ar(\cf3 CombN\cf0 .ar(\cf3 In\cf0 .ar(0,2),0.05,0.05,3.60685),\cf3 MouseY\cf0 .kr(200,10000),\cf3 MouseX\cf0 .kr(0.1,1.0)))\}.play(addAction:\cf5 \\addToTail\cf0 )\
a.free\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs48 \cf0 \
}