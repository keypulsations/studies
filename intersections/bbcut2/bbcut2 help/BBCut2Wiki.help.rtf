{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\
[\cf3 \ul \ulc3 BBCutLibrary\cf0 \ulnone ] \cf2 //link to the full GNU GPL and acknowledgements\cf0 \
[\cf3 \ul BBCut2Wiki\cf0 \ulnone ] \cf2 //add this top line to your main Help page to browse BBCut help easily\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //Click on an underlined link to go directly to a help file, or double click on enclosing brackets then press cmd+?\cf0 \
\
\
\cf2 //IMPORTANT CAUTION/PROVISOS:\cf0 \
s.latency=0.05; \cf2 //do not use large latencies with bbcut2, the default of 0.2 seconds is dangerous and may interact adversely with scheduling especially for faster tempi and beat tracking. \cf0 \
\cf2 //Only tempi in a standard range of around 1-4bps are supported. \cf0 \
\cf2 //AutoTrack and AnalyseEvents UGens only support 44100 Server sampling rate. Behaviour won't be what you'd like for other rates. \cf0 \
\
\
\cf2 //Introductions/Tutorials\cf0 \
[\ul bbcut2 installation\ulnone ] 			\
\
[\cf3 \ul BBCut2\cf0 \ulnone ] \cf2 //overview of the main functionality and code style for bbcut2\cf0 \
\
\
\cf2 //Classes\cf0 \
\
\cf2 //Machine Listening (can also be used independently of the cutters...)\cf0 \
[\cf3 \ul Segmentation\cf0 \ulnone ] 		\cf2 //GUI for segmentation, preparing soundfiles for use with CutBuf3 in particular, RT and NRT modes\cf0 \
[\cf3 \ul AutoTrack\cf0 \ulnone ] 			\cf2 //beat tracking UGen\cf0 \
[\cf3 \ul AnalyseEvents2\cf0 \ulnone ] 		\cf2 //on-the-fly event analysis UGen\cf0 \
[\cf3 \ul AnalyseEventsDatabase\cf0 \ulnone ]\cf2 //form a database of events on-the-fly\cf0 \
[\cf3 \ul DrumTrack\cf0 \ulnone ]			\cf2 //experimental beat tracking UGen, tries to spot typical 4/4 drum patterns\cf0 \
\
\cf2 //Cut Procedures (CutProcs)\cf0 \
[\cf3 \ul BBCPPermute\cf0 \ulnone ]  		\cf2 //generalised permutation cut function\cf0 \
[\cf3 \ul BBCutProc11\cf0 \ulnone ]	 		\cf2 //abstraction of early d+b/jungle based on 3+3+2 like figures\cf0 \
[\cf3 \ul CageCut\cf0 \ulnone ]				\cf2 //John Cage's 'square root' form influences a recursive cutter\cf0 \
[\cf3 \ul CampCutProc\cf0 \ulnone ] 		\cf2 //campanology = change ringing = bell ringing permutation patterns\cf0 \
[\cf3 \ul ChooseBlockProc\cf0 \ulnone ]		\cf2 //select a block at a time by size, also determining the subdivisions\cf0 \
[\cf3 \ul ChooseCutProc\cf0 \ulnone ]		\cf2 //select a cut at a time, with number of repeats, also a chance of rolls\cf0 \
[\cf3 \ul MotifCutProc\cf0 \ulnone ]		\cf2 //intermediate level of hierarchy between phrase and block manipulated\cf0 \
[\cf3 \ul MultiProc\cf0 \ulnone ]			\cf2 //a procedure that selects between other cut procedures algorithmically\cf0 \
[\cf3 \ul OffsetCP1\cf0 \ulnone ]			\cf2 //choose next block and associated offset\cf0 \
[\cf3 \ul RecCutProc\cf0 \ulnone ]			\cf2 //first version of a recursive cut procedure\cf0 \
[\cf3 \ul RecursiveCutProc1\cf0 \ulnone ]	\cf2 //explicit recursive cut procedure plus demo of implicit using CutStream1 \cf0 \
[\cf3 \ul SQPusher1\cf0 \ulnone ]			\cf2 //simulation of Squarepusher drum programming via cut decisions\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 [\cf3 \ul \ulc3 SQPusher2\cf0 \ulnone ]			\cf2 //simulation of Squarepusher drum programming auto-transcribed from Come On My Selector\cf0 \
[\cf3 \ul TimelineCut\cf0 \ulnone ]			\cf2 //inspired by choosing a fundamental timeline as block stricture on cuts\cf0 \
[\cf3 \ul ThrashCutProc1\cf0 \ulnone ]		\cf2 //algorithmic abstraction of thrash drumming\cf0 \
[\cf3 \ul WarpCutProc1\cf0 \ulnone ]		\cf2 //Warp Records cutting simulation, fast pitched rolls up into audio rate\cf0 \
[\cf3 \ul BBCutProc\cf0 \ulnone ]			\cf2 //backwards compatability means I keep this older base class from BBCut1\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //Cut Synthesisers (CutSynths)\cf0 \
[\cf3 \ul CutGroup\cf0 \ulnone ] 			\cf2 //showing how to set Group and Bus of a cutter, and how to swap cutsynths on-the-fly\cf0 \
[\cf3 \ul CutMixer\cf0 \ulnone ]			\cf2 //control final rendering bus, master volume, and ampfunc and panfunc parameters of cuts\cf0 \
[\cf3 \ul CutTrig1\cf0 \ulnone ]			\cf2 //trigger samples from cuts (which may come from a set of buffers)\cf0 \
[\cf3 \ul CutStream1\cf0 \ulnone ]			\cf2 //cut up a stream, via an intermediary buffer that holds the most recent cut for repeating\cf0 \
[\cf3 \ul CutStream2\cf0 \ulnone ]			\cf2 //cut up a stream, via an intermediary buffer that allows offsetting from the most recent clock beat\cf0 \
[\cf3 \ul CutStream3\cf0 \ulnone ]			\cf2 //cut up a stream, using on-the fly event analysis and relative to the clock's beat positions \cf0 \
[\cf3 \ul CutBuf1\cf0 \ulnone ]				\cf2 //cheap CPU buffer playback head jumping cutsynth, but no enveloping \cf0 \
[\cf3 \ul CutBuf2\cf0 \ulnone ]				\cf2 //spawns an enveloped grain Synth for each cut \cf0 \
[\cf3 \ul CutBuf3\cf0 \ulnone ]				\cf2 //uses knowledge of the analysed position of events in a buffer when rendering splices\cf0 \
[\cf3 \ul CutFunc\cf0 \ulnone ]				\cf2 //call arbitrary functions at a new phrase, block or for individual cuts.  \cf0 \
[\cf3 \ul CutTrace\cf0 \ulnone ]			\cf2 //(experimental) posts status, may be overridden later for OSC messaging of state to other apps\cf0 \
\
\cf2 //There are a number of other FX units of various kinds which you'll see turning up in examples, but which don't have their own help files. \cf0 \
\
\cf2 //Scheduling\cf0 \
[\cf3 \ul ExternalClock\cf0 \ulnone ] 		\cf2 //using bbcut2 and EventStreams with an external clock\cf0 \
[\cf3 \ul ServerClock\cf0 \ulnone ]   		\cf2 //running the controlling clock on the Server; shows beat tracking\cf0 \
[\cf3 \ul EventStreamPlayer2\cf0 \ulnone ]	\cf2 //support for using Streams with an ExternalClock\cf0 \
[\cf3 \ul CutProcStream\cf0 \ulnone ] 		\cf2 //Use a cut procedure as a stream, and within Patterns library \cf0 \
\
\
\cf2 //Core/Misc\cf0 \
[\cf3 \ul BBCutBuffer\cf0 \ulnone ]			\cf2 //represents a Buffer with some BBCut specific refinements (derived from Buffer)\cf0 \
[\cf3 \ul BBCutBlock\cf0 \ulnone ] 			\cf2 //Data for the current block is held in a BBCutBlock object\cf0 \
[\cf3 \ul BBCutQuantise1\cf0 \ulnone ] 		\cf2 //(experimental) imposition of a metric template onto the cut procedure output\cf0 \
[\cf3 \ul BufSelector\cf0 \ulnone ]			\cf2 //swaps between an array of BBCutBuffers at phrase or block boundaries\cf0 \
\
\
\cf2 //Further Examples\cf0 \
[\ul automated fx unit swapping\ulnone ]\
[\ul sqpush on sqpush\ulnone ]\
[\ul simultaneous beat tracking and event analysis\ulnone ]\
[\ul beat tracking stereo remix\ulnone ]\
[\ul fredrik olofsson examples\ulnone ]\
[\ul cut attack\ulnone ]\
[\ul fills and cutproc swapping\ulnone ]\
[\ul over the top\ulnone ]\
}