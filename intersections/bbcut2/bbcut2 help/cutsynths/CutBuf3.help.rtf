{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 CutBuf3
\f1\b0 \
\
Playback for a segmented buffer, with individual grains spawned for each event. Cuts play back any events within their scope. The scheduling system for bbcut2 takes account of groove based time deviations from quantised template positions for the events, and perceptual attack times. Note that FX units may switch exactly on the cuts, which may or may not match up with the event playback. There are options to constrain the amount of groove deviation. \
\
Because CutBuf3 works by scheduling individual events in a soundfile, there is no repitch for different tempi. So you may get different plkayback speeds from a CutBuf2 or 1- ie, with CutBuf3 you should hear the sample's original pitch at whatever tempo you explore.   \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 \ul \ulc0 Class Methods
\f1\b0 \ulnone \
\

\f2\b *new(bbcutbuf, offset, deviationmult, pretrim, posttrim, pbsfunc, dutycycle, atk, rel, curve)\

\f1\b0 \

\f2\b bbuctbuf
\f1\b0  - An instance of BBCutBuffer representing the buffer to be cut-up.\
    \

\f2\b offset
\f1\b0 - A parameter to be passed to any cut playback position determining routine. The default chooseoffset method is in BBCutBuffer and the parameter is a single number from 0.0 to 1.0 giving the chance of a jump to a random event in the source. You can pass an Array in that has two parameters, being [randomoffsetchance, quantise grid of offsetcutting in beats]. Ie, [0.3, 0.5] would have a 30% chance of jumping to a random eighth note position. \
\

\f2\b deviationmult
\f1\b0 - Multiplies the groove based time deviations of events. Set to 0.0 for rigid quantise based playback, 1.0 for full original timing properties. \
\

\f2\b pretrim
\f1\b0 - If playing back a cut, play any events within the cut even if there tming deviation puts them ahead of the cut start. Ie, play anticipatory events. \
\

\f2\b posttrim
\f1\b0 - The same for events whose deviation puts them after the end of the cut, but whose quantised position is within the cut. \
\

\f2\b pbsfunc
\f1\b0 - Playback speed (rate) control for grains. \
\

\f2\b dutycycle
\f1\b0 - Ratio of duration to inter-onset-interval (IOI). 0.5 would mean that the duration of grains is only half the length between cut start times. \
\

\f2\b atk
\f1\b0 - Enveloping parameter for attack speed of an event grain, in seconds. You may set to zero to play back source events exactly as in the original, assuming the source is proprely segmented and there are no clicks. \
\

\f2\b relprop
\f1\b0 - Enveloping parameter for release speed in seconds.\
\

\f2\b curve
\f1\b0 - Envelope curve parameter. \
\
The cut synthesis arguments apart from bbcutbuf can have more complex objects than SimpleNumbers passed in. You can pass in anything which responds to value (like a Function) or even objects which respond to the updateblock method such as CutPBS1 (see examples below). \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\
s=\cf3 Server\cf0 .default;
\f1\fs24 \

\f0\fs18 \
\
\cf2 //default segmentation into eighth note events applied to the buffer \cf0 \
\
(\
\cf3 var\cf0  sf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8);\
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutBuf3\cf0 (sf,0.3), \cf3 BBCutProc11\cf0 .new).play(clock);\
\});\
\
)\
\
\
\cf2 //segment into even 16ths, apply swing on event playback, dutycycle manipulation, no enveloping\cf0 \
(\
\cf3 var\cf0  sf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (1.8));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8, 0.25); \cf2 //segment into 16ths so 16th swing works\cf0 \
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
sf.setgroove; \cf2 //defaults to UK garage swing\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutBuf3\cf0 (sf,0.3,0.0,\cf3 true\cf0 ,\cf3 true\cf0 ,1.0,1.0,0.0,0.0,0), \cf3 BBCutProc11\cf0 .new).play(clock);\
\});\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //passing in event positions, event lengths will be taken as distance between event onsets\cf0 \
\cf2 //demonstrating repitch, keeping all anticipations and postevents with original groove deviation   \cf0 \
(\
\cf3 var\cf0  sf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (3.1));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break2"\cf0 ,4, [ 0, 16789, 28721, 37166, 41389, 49042, 56783 ]);\
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutBuf3\cf0 (sf,0.3,1.0, \cf3 false\cf0 , \cf3 false\cf0 ), \cf3 BBCutProc11\cf0 .new).play(clock);\
\});\
\
)\
\
\
\
\cf2 //preserving time deviations but events realigned to a UK garage swing grid\cf0 \
\cf2 //also shows interaction with FX unit\cf0 \
(\
\cf3 var\cf0  sf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.8));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break2"\cf0 ,4, [ 0, 16789, 28721, 37166, 41389, 49042, 56783 ]); \cf2 //segment into 16ths so 16th swing works\cf0 \
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
sf.setgroove; \cf2 //defaults to UK garage swing\cf0 \
\
\cf3 BBCut2\cf0 ([\cf3 CutBuf3\cf0 (sf,0.3,1.0,\cf3 false\cf0 ,\cf3 false\cf0 ,1.0,1.0,0.0,0.0,0),\cf3 CutComb1\cf0 .new], \cf3 ChooseCutProc\cf0 (1.0,2)).play(clock);\
\});\
\
)\
\
\
\cf2 //use the GUI to find onsets for a loaded sample- use post to output the data array  \cf0 \
\cf3 Segmentation\cf0 .new \cf2 //also see the help file for this GUI\cf0 \
\
\
\cf2 //you could substitute your data here, remember to change the sound filename too\cf0 \
(\
~data=[ [ 380, 0.21049886621315, 0.005 ], [ 9663, 0.16013605442177, 0.005 ], [ 16725, 0.28975056689342, 0.005 ], [ 29503, 0.085555555555556, 0.005 ], [ 33276, 0.067482993197279, 0.005 ], [ 41243, 0.18616780045351, 0.005 ], [ 49453, 0.29065759637188, 0.005 ], [ 62271, 0.085532879818594, 0.005 ], [ 66043, 0.081360544217687, 0.005 ], [ 74014, 0.18480725623583, 0.005 ], [ 82164, 0.28897959183673, 0.005 ], [ 94908, 0.08421768707483, 0.005 ], [ 98622, 0.096734693877551, 0.005 ], [ 106492, 0.2931746031746, 0.005 ], [ 119421, 0.08562358276644, 0.005 ], [ 123197, 0.0740589569161, 0.005 ] ];\
)\
\
\cf2 //passing in event data in general form  \cf0 \
(\
\cf3 var\cf0  sf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
sf= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8, ~data);\
\
s.sync; \cf2 //this forces a wait for the Buffer to load\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutBuf3\cf0 (sf,0.3,1.0, \cf3 false\cf0 , \cf3 true\cf0 ), \cf3 BBCutProc11\cf0 .new).play(clock);\
\});\
)\
\
\
\cf2 /////////////////////////////////////////////////////////////////////\cf0 \
\cf2 //test code for finding events for wraparound cuts \cf0 \
\cf2 //default segmentation into eighth note events applied to the buffer \cf0 \
f= \cf3 BBCutBuffer\cf0 (\cf4 "sounds/break"\cf0 ,8);\
a=f.findevents(7,8.4).postln;\
b=f.trimevents(7,8.4,a,\cf3 true\cf0 , \cf3 true\cf0 ,2);\
\cf2 //////////////////////////////////////////////////////////////////////\cf0 \
\
\
}