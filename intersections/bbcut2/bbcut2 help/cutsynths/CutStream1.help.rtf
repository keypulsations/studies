{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 CutStream1
\f1\b0 \
\
Playback for a stream of audio which can be cut-up. The stream can be any bus on the Server, so might be a file streamed off disk, a current audio input or some synthesised data. \
\
Each grain may have associated parameters for enveloping and dutycycle (ratio of duration to inter-onset-interval).  \
\
Note that CutStream1 uses In.ar rather than InFeedback.ar, for reaction speed, so execution order is important. you cannot cut-up a stream created later in the execution order. Change the SynthDefs in the class file to InFeedback if you want no execution order worries, at the expense of an audio block's delay (usually 64 samples). \
\

\f2\b \ul Class Methods
\f1\b0 \ulnone \
\

\f2\b *new(inbus, bufnum, dutycycle, atkprop, relprop, curve)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b \cf0 inbus
\f1\b0  - Bus on the Server to be cut-up.\
    \

\f2\b bufnum
\f1\b0 - A Server side buffer must exist for the use of the UGen- by default one is allocated for you.\
\

\f2\b dutycycle
\f1\b0 - Ratio of duration to inter-onset-interval (IOI). 0.5 would mean that the duration of grains is only half the length between cut start times. \
\

\f2\b atkprop
\f1\b0 - Enveloping parameter for attack speed. Rated as a proportion of the overall envelope (0.0 to 1.0) \
\

\f2\b relprop
\f1\b0 - Enveloping parameter for release speed. Rated as a proportion of the overall envelope (0.0 to 1.0) \
\

\f2\b curve
\f1\b0 - Envelope curve\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 \
\
s=\cf3 Server\cf0 .default;\
\
	\
a=\cf3 BBCut2\cf0 (\cf3 CutStream1\cf0 .new).play;\
\
a.end;\
\
\cf2 //dutycycle and envelope manipulations of first audio in channel\cf0 \
(\
\cf3 var\cf0  buf, clock;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
			\
buf= \cf3 BBCutBuffer\cf0 .alloc(s,44100,1);\
\
s.sync; \cf2 //this forces a wait for the Buffer to be allocated\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutStream1\cf0 (s.options.numOutputBusChannels, buf, 0.5, 0.001, 0.5, -4), \cf3 WarpCutProc1\cf0 .new).play(clock);\
\});\
\
)\
\
\
\
\cf2 //dutycycle and envelope manipulations cutting up a stream being synthesised\cf0 \
(\
\cf3 var\cf0  buf, clock, synthgroup, bbcutgroup, synthbus;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
						\
synthgroup= \cf3 Group\cf0 .head(\cf3 Node\cf0 .basicNew(s,1));		\
bbcutgroup= \cf3 Group\cf0 .after(synthgroup);\
		\
synthbus= \cf3 Bus\cf0 .audio(s,1);		\
		\
\cf3 Routine\cf0 .run(\{\
		\
\cf3 SynthDef\cf0 (\cf4 \\sourcesound\cf0 ,\{\cf3 Out\cf0 .ar(synthbus.index,\cf3 Gendy1\cf0 .ar(1,3,0.2,0.5,\cf3 LFNoise1\cf0 .kr(1,100,300),550,0.05,0.07))\}).play(synthgroup);			\
buf= \cf3 BBCutBuffer\cf0 .alloc(s,44100,1);\
\
s.sync; \cf2 //this forces a wait for the Buffer to be allocated\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 (\cf3 CutStream1\cf0 (synthbus.index, buf, 0.75, 0.01, 0.5, -4),bbcutgroup), \cf3 WarpCutProc1\cf0 .new).play(clock);\
\});\
\
clock.play;		\
)\
\
\cf2 //source on its own for comparison\cf0 \
\cf3 SynthDef\cf0 (\cf4 \\sourcesound\cf0 ,\{\cf3 Out\cf0 .ar(0,\cf3 Gendy1\cf0 .ar(1,3,0.2,0.5,\cf3 LFNoise1\cf0 .kr(1,100,300),550,0.05,0.07)*0.1)\}).play;\
\
\
\
\cf2 //cutup of stereo sound- note use of stereo Bus and creation of stereo buffer, CutGroup last argument is numChannels\cf0 \
(\
\cf3 var\cf0  buf, clock, synthgroup, bbcutgroup, synthbus;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
						\
synthgroup= \cf3 Group\cf0 .head(\cf3 Node\cf0 .basicNew(s,1));		\
bbcutgroup= \cf3 Group\cf0 .after(synthgroup);\
		\
synthbus= \cf3 Bus\cf0 .audio(s,2);		\
		\
\cf3 Routine\cf0 .run(\{\
		\
\cf3 SynthDef\cf0 (\cf4 \\sourcesound\cf0 ,\{\cf3 Out\cf0 .ar(synthbus.index,0.25*\cf3 Gendy1\cf0 .ar(1,3,0.2,0.5,\cf3 LFNoise1\cf0 .kr([1.1,1.3],100,300),[650,750],0.05,0.07))\}).play(synthgroup);			\
buf= \cf3 BBCutBuffer\cf0 .alloc(s,44100,2);\
\
s.sync; \cf2 //this forces a wait for the Buffer to be allocated\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 (\cf3 CutStream1\cf0 (synthbus.index, buf, 0.75, 0.01, 0.5, -4),bbcutgroup,\cf3 nil\cf0 ,2), \cf3 WarpCutProc1\cf0 .new).play(clock);\
\});\
\
clock.play;		\
)\
\
\
\
\
\cf2 //same for three things at once- break fixed buffer plus stereo synth source and mono audio in streams. Sing/rap along on the beat and listen to what happens: "wanna be in a disco where everything I say gets cut to the beat in a slightly cool way"  \cf0 \
(\
\cf3 var\cf0  b, buf1, buf2, clock, synthgroup, bbcutgroup, synthbus;\
\
clock= \cf3 ExternalClock\cf0 (\cf3 TempoClock\cf0 (2.1));	\
						\
synthgroup= \cf3 Group\cf0 .head(\cf3 Node\cf0 .basicNew(s,1));		\
bbcutgroup= \cf3 Group\cf0 .after(synthgroup);\
		\
synthbus= \cf3 Bus\cf0 .audio(s,1);		\
	\
\cf3 SynthDef\cf0 (\cf4 \\sourcesound\cf0 ,\{\cf3 Out\cf0 .ar(synthbus.index,\cf3 LFSaw\cf0 .ar([62.9,63.1]*\cf3 LFNoise0\cf0 .kr(2.1,0.5,1.0),0,0.5).squared.clip2(0.25)*2)\}).play(synthgroup);		\
clock.play;		\
		\
\cf3 Routine\cf0 .run(\{\
	\
b=\cf3 BBCutBuffer\cf0 (\cf5 "sounds/break2"\cf0 ,4);	\
			\
buf1= \cf3 BBCutBuffer\cf0 .alloc(s,44100,1);\
buf2= \cf3 BBCutBuffer\cf0 .alloc(s,44100,2);\
\
s.sync; \cf2 //this forces a wait for the Buffer to be allocated\cf0 \
\
\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 (\cf3 CutStream1\cf0 (s.options.numOutputBusChannels, buf1),\cf3 Group\cf0 .head(bbcutgroup)), \cf3 ChooseCutProc\cf0 (\{[0.5,0.25].choose\},\{[2,4].choose\})).play(clock);\
\
\cf2 //this one uses the offset param as the number of beats within which to jump, given the predetermined offsets of \cf0 \
\cf2 //OffsetCP1\cf0 \
\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 (\cf3 CutStream2\cf0 (synthbus.index, buf2),\cf3 Group\cf0 .head(bbcutgroup), \cf3 nil\cf0 , 2), \cf3 OffsetCP1\cf0 (\
\{\cf3 arg\cf0  beatsleft, phraselength,block;\
\
if(block%2==0,\
\{[[0.5,0.5],[1,5,9].choose]\}, \{[[[0.25],[0.25,0.25]].choose,[4,8,12].choose]\});\
\}, 0.0625\
)).play(clock);\
\
\cf3 BBCut2\cf0 (\cf3 CutGroup\cf0 (\cf3 CutBuf2\cf0 (b,0.2),\cf3 Group\cf0 .head(bbcutgroup)),\cf3 ChooseBlockProc\cf0 (1.0,\{[1,2,4].choose\})).play(clock);\
\});\
\
)\
\
\
}